permissions:
  actions: read
  checks: read
  contents: read
  deployments: none
  issues: none
  packages: none
  pull-requests: none
  repository-projects: none
  security-events: write
  statuses: none

on:
  workflow_call:
    inputs:
      tag:
        description: 'Tag for docker image'
        required: true
        type: string
      branch_name:
        description: 'Branch we are on'
        required: true
        type: string
    secrets:
      aws_access_key_id_actions:
        required: true
      aws_secret_access_key_actions:
        required: true

jobs:
  docker_build_scan_push:
    name: Build, Scan and Push Lambdas
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: 'lpa-iap-request-handler-lambda'
            path: 'lambdas/image_request_handler'
          - name: 'lpa-iap-scan-processor-lambda'
            path: 'lambdas/image_processor'
          - name: 'lpa-iap-mock-sirius'
            path: 'mock-services/sirius/app'
          - name: 'lpa-iap-mock-sirius-web'
            path: 'mock-services/sirius/web'
    steps:
      - name: Check out code
        id: checkout_code
        uses: actions/checkout@v4.1.1

      - name: Build Container
        id: build_container
        run: docker build --file ${{ matrix.path }}/Dockerfile --tag ${{ matrix.name }}:latest ${{ matrix.path }}

      - name: Trivy Image Vulnerability Scanner
        id: trivy_scan
        uses: aquasecurity/trivy-action@7088d18dcb87884bc7b5a4000d5517d758e9aa13
        with:
          image-ref: ${{ matrix.name }}:latest
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          security-checks: "vuln"
          ignore-unfixed: true
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        id: trivy_upload_sarif
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Install AWS Cli
        uses: unfor19/install-aws-cli-action@27d6061dae5d39e89be4d2246824f15e111a7e06

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@a78e788c51463a506fbaaec784bab37f73afb4e8
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id_actions }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key_actions }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/integrations-ci
          role-duration-seconds: 900
          role-session-name: OPGLPAIaPGithubAction

      - name: Login to ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@0c3387e78369b9326e6d1d7204ad8f92133975a8
        with:
          registries: 311462405659

      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REPOSITORY: integrations/${{ matrix.name }}
          BRANCH_NAME: ${{ inputs.branch_name }}
        run: |
          docker tag ${{ matrix.name }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.tag }}
          if [ $BRANCH_NAME == "main" ]; then
            docker tag ${{ matrix.name }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker tag ${{ matrix.name }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:main-${{ inputs.tag }}
          fi
            echo "skipping push for now..."
            docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
